// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mongodb"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}


model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  // if you are using Github OAuth, you can get rid of the username attribute (that is for Twitter OAuth)
  username      String?
  gh_username   String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  refresh_token_expires_in Int?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  title         String?      @db.String
  description   String?     @db.String
  content       String?     @db.String
  slug          String      @default(cuid())
  image      String?   @db.String
  imageBlurhash String?   @db.String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  published     Boolean      @default(false)
  site          Site? @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?
  @@unique([id, siteId], name: "post_site_constraint")
}

model Site {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String? @db.String
  logo          String?
  image         String? @db.String
  imageBlurhash String? @db.String
  subdomain     String? @unique
  customDomain  String? @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User? @relation(fields: [userId], references: [id])
  userId        String?
  posts         Post[]
}

model Example {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String? @db.String
  domainCount   Int?
  url           String?
  image         String? @db.String
  imageBlurhash String? @db.String
}
